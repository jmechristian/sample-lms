type LessonSource @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  link: String
  position: Int!
}

type LessonLink @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  link: String
}

type Tags @model @auth(rules: [{ allow: public }]) {
  id: ID!
  tag: String!
}

enum ModuleType {
  LESSON
  LOTM
  MICROLESSON
}

enum CategoryType {
  MATERIALS
  INDUSTRY
  FOODANDBEVERAGE
  BUSINESS
  SUPPLYCHAIN
  DESIGN
}

enum MediaType {
  VIDEO
  IMAGE
  SLIDES
}

type Certificate @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "certificateByTitle")
  title: String!
  title_callout_1: String
  title_callout_2: String
  title_text: String
  title_button_1_text: String
  title_button_1_link: String
  title_button_2_text: String
  title_button_2_link: String
  title_image: String
  courses: [Course] @manyToMany(relationName: "CertificateCourses")
  whoText: String
  courses_total: Int
  hours_total: Int
  ceus_total: Int
  brochure_link: String
  video: String
  price_full: Int
  price_monthly: Int
  price_features: [String]
  lmsLink: String
  demoLink: String
}

type Course @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "courseBySlug")
  category: CategoryType!
  title: String!
  subhead: String
  media: String
  video: String
  hour: Int
  lessons: Int
  videos: Int
  price: Int
  articles: [Article] @manyToMany(relationName: "ArticleRelatedCourses")
  certificate: [Certificate] @manyToMany(relationName: "CertificateCourses")
}

type Lesson @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "lessonsByTitle")
  title: String!
  subhead: String
  type: ModuleType
  media: String
  mediaType: MediaType
  slides: [String]
  seoImage: String
  content: String
  sources: [LessonSource] @hasMany
  links: [LessonLink] @hasMany
  tags: [Tags] @hasMany
  objectives: [String]
  actionCTA: String
  actionSubhead: String
  actionLink: String
  actionLinkTitle: String
  actionExample: String
}

type Blog @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "blogBySlug")
  title: String!
  media: String
  content: String!
  author: String
  tags: [Tags] @hasMany
  date: String
}

type Article @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "aticlesByTitle")
  title: String!
  subhead: String
  media: String
  seoImage: String
  content: String
  tags: [Tags] @hasMany
  relatedCourses: [Course] @manyToMany(relationName: "ArticleRelatedCourses")
}

type DayInLifeItem @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  desc: String!
  icon: String
}

type Career @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slug: String! @index(name: "careerByTitle")
  title: String!
  altName: String
  subhead: String
  media: String
  dayInLife: [DayInLifeItem] @hasMany
  cmpmCopy: String
  cpsCopy: String
  apcCopy: String
  coreCopy: String
  electiveCopy: String
  freeCopy: String
  beverageCopy: String
}

# Autopack Summit

type APS @model @auth(rules: [{ allow: public }]) {
  id: ID!
  Registrants: [User] @manyToMany(relationName: "APSUser")
  Sponsors: [Company] @manyToMany(relationName: "APSSponsor")
  Speakers: [APSSpeaker] @hasMany
  year: Int!
  codes: [RegistrationCode]
}

type Company @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  Employees: [User] @hasMany(indexName: "userByCompany", fields: ["id"])
  website: String
  email: String
  phone: String
  street_1: String
  street_2: String
  city: String
  state: String
  zip: String
  apsID: [APS] @manyToMany(relationName: "APSSponsor")
}

# User //////////

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String! @index(name: "userByName")
  title: String
  company: String
  email: String! @index(name: "userByEmail")
  office: String
  cell: String
  picture: String
  linkedin: String
  companyID: ID @index(name: "userByCompany")
  apss: [APS] @manyToMany(relationName: "APSUser")
  cmpmFormID: ID
  cmpmForm: CMPMForm @hasOne(fields: ["cmpmFormID"])
  instructorId: Instructor @hasOne
  studentId: Student @hasOne
}

type CMPMForm
  @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" })
  @auth(rules: [{ allow: public }]) {
  id: ID!
  user: User! @belongsTo
  firstName: String
  lastName: String
  email: String! @index(name: "cmpmByEmail")
  phone: String
  streetAddress: String
  addressExtra: String
  city: String
  state: String
  country: String
  companyName: String
  companyTitle: String
  linkedin: String
  background: String
  whyPackaging: String
  areaOfInterest: String
  sessionApplying: String
  referral: String
  payment: String
  yearGoals: String
  cmpmGoals: String
  moreAboutYou: String
}

type APSSpeaker @model @auth(rules: [{ allow: public }]) {
  firstName: String!
  lastName: String!
  email: String!
  company: String!
  title: String!
  phone: String
  linkedin: String
  bio: String!
  presentationTitle: String
  presentationSummary: String
  headshot: String!
  mediaConsent: Boolean
  privacyConsent: Boolean
  apsHistory: APS @belongsTo
}

type RegistrationCode {
  code: String
}

######### LMS #########

type LMSCirriculum @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  Courses: [LMSCourse] @manyToMany(relationName: "CirriculumCourses")
}

type LMSCourse @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  courseId: String
  Cirriculum: [LMSCirriculum] @manyToMany(relationName: "CirriculumCourses")
  Lessons: [LMSLesson] @manyToMany(relationName: "CourseLessons")
  Instructors: [Instructor] @manyToMany(relationName: "CourseInstructors")
  price: Int
  hours: Int
  videos: Int
  seoImage: String
  description: String
  percentComplete: Int
}

type LMSLesson @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  title: String
  Course: [LMSCourse] @manyToMany(relationName: "CourseLessons")
  subheadline: String
  objectives: [Objective] @hasMany
  mediaType: MediaType
  slides: [Slide] @hasMany
  video: LessonVideo @hasOne
  percentComplete: Int
}

type Student @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  studentId: ID
  student: User @belongsTo(fields: ["studentId"])
  courseEnrolled: [LMSCourse] @hasMany
}

type Instructor @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  userId: ID
  instructor: User! @belongsTo(fields: ["userId"])
  coursesTaught: [LMSCourse] @manyToMany(relationName: "CourseInstructors")
}

type Objective @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  objective: String!
  completed: Boolean
}

type Slide @model @auth(rules: [{ allow: public }]) {
  id: ID!
  slideSource: String!
  description: String
}

type LessonVideo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  timestamps: [Timestamp] @hasMany
  lessonId: ID
  lesson: LMSLesson @belongsTo(fields: ["lessonId"])
}

type Timestamp @model @auth(rules: [{ allow: public }]) {
  id: ID!
  time: String!
  description: String
}
